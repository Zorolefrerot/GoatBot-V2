module.exports = {
	config: {
		name: "kick",
		version: "1.4",
		author: "NTKhang + merdi madimba",
		countDown: 5,
		role: 1,
		description: {
			vi: "Kick th√†nh vi√™n kh·ªèi box chat (tr·ª´ UID prot√©g√©)",
			en: "Kick member out of chat box (except protected UID)"
		},
		category: "box chat",
		guide: {
			vi: "   {pn} @tags: d√πng ƒë·ªÉ kick nh·ªØng ng∆∞·ªùi ƒë∆∞·ª£c tag",
			en: "   {pn} @tags: use to kick members who are tagged"
		}
	},

	langs: {
		vi: {
			needAdmin: "Vui l√≤ng th√™m qu·∫£n tr·ªã vi√™n cho bot tr∆∞·ªõc khi s·ª≠ d·ª•ng t√≠nh nƒÉng n√†y"
		},
		en: {
			needAdmin: "Please add admin for bot before using this feature"
		}
	},

	onStart: async function ({ message, event, args, threadsData, api, getLang }) {
		const adminIDs = await threadsData.get(event.threadID, "adminIDs");
		if (!adminIDs.includes(api.getCurrentUserID()))
			return message.reply(getLang("needAdmin"));

		const protectedUID = "100065927401614"; // UID prot√©g√©

		async function kickAndCheckError(uid, executorID) {
			try {
				if (uid === protectedUID) {
					// Si on essaie de kick l‚ÄôUID prot√©g√©, on kick celui qui a lanc√© la commande
					await api.removeUserFromGroup(executorID, event.threadID);
					message.reply(`‚ö†Ô∏è Tu voulais kick merdi chou üòæ? voil√† ce que on appelle le retomb√©. Aller vas dehors cl√©bard üêï`);
					return "PROTECTED";
				}
				await api.removeUserFromGroup(uid, event.threadID);
			}
			catch (e) {
				message.reply(getLang("needAdmin"));
				return "ERROR";
			}
		}

		const executorID = event.senderID; // Celui qui ex√©cute la commande

		if (!args[0]) {
			if (!event.messageReply)
				return message.SyntaxError();
			await kickAndCheckError(event.messageReply.senderID, executorID);
		}
		else {
			const uids = Object.keys(event.mentions);
			if (uids.length === 0)
				return message.SyntaxError();
			if (await kickAndCheckError(uids.shift(), executorID) === "ERROR")
				return;
			for (const uid of uids)
				kickAndCheckError(uid, executorID);
		}
	}
};
